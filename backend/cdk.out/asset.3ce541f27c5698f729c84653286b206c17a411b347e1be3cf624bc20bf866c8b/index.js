"use strict";var M=require("node:stream"),R=require("node:stream/promises"),T=require("node:timers"),p=()=>{},z={timeoutEarlyInMillis:5,timeoutEarlyResponse:()=>{let e=new Error("[AbortError]: The operation was aborted.",{cause:{package:"@middy/core"}});throw e.name="TimeoutError",e},streamifyResponse:!1},H=(e=p,o={})=>{typeof e!="function"&&(o=e,e=p),o={...z,...o},o.timeoutEarly=o.timeoutEarlyInMillis>0,o.beforePrefetch?.();let d=[],c=[],m=[],i=(t={},a={})=>{o.requestStart?.();let n={event:t,context:a,response:void 0,error:void 0,internal:o.internal??{}};return j(n,d,e,c,m,o)},r=o.streamifyResponse?awslambda.streamifyResponse(async(t,a,n)=>{let s=await i(t,n),f=s;s.statusCode&&(f=s.body??"",delete s.body,a=awslambda.HttpResponseStream.from(a,s));let l;if(f._readableState)l=f;else if(typeof f=="string"){function*b(u){let w=0,L=u.length;for(;w<L;)yield u.substring(w,w+16384),w+=16384}l=M.Readable.from(b(f))}if(!l)throw new Error("handler response not a ReadableStream");await(0,R.pipeline)(l,a)}):i;return r.use=t=>{Array.isArray(t)||(t=[t]);for(let a of t){let{before:n,after:s,onError:f}=a;if(n||s||f)n&&r.before(n),s&&r.after(s),f&&r.onError(f);else throw new Error('Middleware must be an object containing at least one key among "before", "after", "onError"')}return r},r.before=t=>(d.push(t),r),r.after=t=>(c.unshift(t),r),r.onError=t=>(m.unshift(t),r),r.handler=t=>(e=t,r),r},h=new AbortController,j=async(e,o,d,c,m,i)=>{let r,t=i.timeoutEarly&&e.context.getRemainingTimeInMillis;try{if(await E(e,o,i),typeof e.response>"u"){i.beforeHandler?.(),h.signal.aborted&&(h=new AbortController);let a=[d(e.event,e.context,{signal:h.signal})];if(t){let n,s=new Promise((f,l)=>{n=()=>{h.abort();try{f(i.timeoutEarlyResponse())}catch(b){l(b)}}});r=(0,T.setTimeout)(n,e.context.getRemainingTimeInMillis()-i.timeoutEarlyInMillis),a.push(s)}e.response=await Promise.race(a),r&&clearTimeout(r),i.afterHandler?.(),await E(e,c,i)}}catch(a){r&&clearTimeout(r),e.response=void 0,e.error=a;try{await E(e,m,i)}catch(n){throw n.originalError=e.error,e.error=n,e.error}if(typeof e.response>"u")throw e.error}finally{await i.requestEnd?.(e)}return e.response},E=async(e,o,d)=>{for(let c of o){d.beforeMiddleware?.(c.name);let m=await c(e);if(d.afterMiddleware?.(c.name),typeof m<"u"){e.response=m;return}}},v=H;var A=require("@aws-lambda-powertools/logger"),I=require("@aws-lambda-powertools/logger/middleware"),P=require("@aws-lambda-powertools/tracer"),y=require("@aws-lambda-powertools/metrics"),S=require("@aws-lambda-powertools/tracer/middleware"),C=require("@aws-lambda-powertools/metrics/middleware"),x=new A.Logger,k=new P.Tracer,g=new y.Metrics;exports.handler=v().use((0,I.injectLambdaContext)(x,{logEvent:!0})).use((0,S.captureLambdaHandler)(k)).use((0,C.logMetrics)(g)).handler(async(e,o)=>{try{g.addMetric("successfulSaveOfEmbeddings",y.MetricUnit.Count,1,y.MetricResolution.High)}catch(d){x.error("Error",{err:d})}});
